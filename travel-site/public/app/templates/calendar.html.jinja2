<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>James Massucco - Travel Calendar</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <style>
      body {
        background-color: #f8f9fa;
      }
      .calendar-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 2rem 0;
        margin-bottom: 2rem;
      }
      .trip-section {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 2rem;
        overflow: hidden;
      }
      .trip-header {
        background: #495057;
        color: white;
        padding: 1rem 1.5rem;
        margin: 0;
      }
      .trip-title {
        font-size: 1.5rem;
        margin-bottom: 0.5rem;
      }
      .trip-dates {
        opacity: 0.9;
        font-size: 0.9rem;
      }
      .calendar-container {
        padding: 1.5rem;
      }
      .calendar-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 1px;
        background-color: #dee2e6;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        overflow: hidden;
      }
      .calendar-day {
        background: white;
        min-height: 100px;
        padding: 0.5rem;
        position: relative;
        display: flex;
        flex-direction: column;
      }
      .calendar-day.other-month {
        background-color: #f8f9fa;
        color: #6c757d;
      }
      .calendar-day.today {
        background-color: #fff3cd;
      }
      .day-number {
        font-weight: 600;
        margin-bottom: 0.25rem;
        font-size: 0.9rem;
      }
      .day-header {
        background-color: #e9ecef;
        text-align: center;
        padding: 0.75rem 0.5rem;
        font-weight: 600;
        font-size: 0.85rem;
        color: #495057;
      }
      .location-indicator {
        background: linear-gradient(135deg, #28a745, #20c997);
        color: white;
        font-size: 0.7rem;
        padding: 0.25rem 0.4rem;
        border-radius: 0px;
        margin: 1px 0;
        line-height: 1.2;
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: nowrap;
        cursor: pointer;
        height: 20px;
        display: flex;
        align-items: center;
        box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        position: relative;
      }
      .location-indicator:hover {
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        transform: translateY(-1px);
        z-index: 10;
      }
      .location-start {
        border-left: 4px solid #007bff;
        border-top-left-radius: 4px;
        border-bottom-left-radius: 4px;
      }
      .location-end {
        border-right: 4px solid #dc3545;
        border-top-right-radius: 4px;
        border-bottom-right-radius: 4px;
      }
      .location-start.location-end {
        border-radius: 4px;
        border: 2px solid #6f42c1;
        background: linear-gradient(135deg, #6f42c1, #5a32a8);
      }
      .location-tooltip {
        position: absolute;
        background: rgba(0, 0, 0, 0.9);
        color: white;
        padding: 0.5rem;
        border-radius: 4px;
        font-size: 0.75rem;
        white-space: nowrap;
        z-index: 100;
        pointer-events: none;
        display: none;
        max-width: 200px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.5);
      }
      .crossover-text {
        font-size: 0.55rem;
        color: #6f42c1;
        font-weight: bold;
        text-align: center;
        margin-top: 4px;
        line-height: 1.1;
      }
      @media (max-width: 768px) {
        .calendar-header {
          padding: 1.5rem 0;
        }
        .calendar-day {
          min-height: 80px;
          padding: 0.25rem;
        }
        .location-indicator {
          font-size: 0.6rem;
          padding: 0.2rem 0.3rem;
          height: 16px;
        }
        .day-number {
          font-size: 0.8rem;
        }
        .trip-title {
          font-size: 1.25rem;
        }
      }
      @media (max-width: 480px) {
        .calendar-day {
          min-height: 60px;
          padding: 0.2rem;
        }
        .location-indicator {
          font-size: 0.55rem;
          padding: 0.15rem 0.25rem;
          height: 14px;
        }
        .day-number {
          font-size: 0.75rem;
        }
      }
    </style>
  </head>
  <body>
    <div class="calendar-header text-center">
      <div class="container">
        <h1 class="display-4 mb-2">Travel Calendar</h1>
        <p class="lead mb-0">James Massucco's Upcoming Adventures</p>
      </div>
    </div>

    <div class="container">
      {% if trips %}
        {% for trip in trips %}
          <div class="trip-section">
            <div class="trip-header">
              <h2 class="trip-title">{{ trip.name }}</h2>
              <div class="trip-dates">
                {{ trip.start_date.strftime('%B %d, %Y') }} - {{ trip.end_date.strftime('%B %d, %Y') }}
                ({{ trip.duration_days }} days)
              </div>
            </div>
            <div class="calendar-container">
              <div id="calendar-{{ trip.id }}"></div>
            </div>
          </div>
        {% endfor %}
      {% else %}
        <div class="text-center py-5">
          <div class="alert alert-info">
            <h4>No trips planned yet!</h4>
            <p class="mb-0">Check back soon for upcoming adventures.</p>
          </div>
        </div>
      {% endif %}
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
      // Calendar generation function
      function generateCalendar(containerId, trip) {
        const container = document.getElementById(containerId);
        
        // Calculate the month range to display
        const startDate = new Date(trip.start_date);
        const endDate = new Date(trip.end_date);
        
        // Start from the beginning of the start month
        const calendarStart = new Date(startDate.getFullYear(), startDate.getMonth(), 1);
        
        // End at the end of the end month
        const calendarEnd = new Date(endDate.getFullYear(), endDate.getMonth() + 1, 0);
        
        // Generate calendar for each month in the range
        let currentMonth = new Date(calendarStart);
        
        while (currentMonth <= calendarEnd) {
          const monthContainer = document.createElement('div');
          monthContainer.className = 'mb-4';
          
          // Month header
          const monthHeader = document.createElement('h4');
          monthHeader.textContent = currentMonth.toLocaleDateString('en-US', { 
            month: 'long', 
            year: 'numeric' 
          });
          monthHeader.className = 'text-center mb-3';
          monthContainer.appendChild(monthHeader);
          
          // Calendar grid
          const grid = document.createElement('div');
          grid.className = 'calendar-grid';
          
          // Day headers
          const dayHeaders = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
          dayHeaders.forEach(day => {
            const header = document.createElement('div');
            header.className = 'day-header';
            header.textContent = day;
            grid.appendChild(header);
          });
          
          // Get first day of month and number of days
          const firstDay = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);
          const lastDay = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);
          const firstDayOfWeek = firstDay.getDay();
          const daysInMonth = lastDay.getDate();
          
          // Add days from previous month to fill the grid
          for (let i = firstDayOfWeek - 1; i >= 0; i--) {
            const prevDay = new Date(firstDay);
            prevDay.setDate(prevDay.getDate() - i - 1);
            createDayCell(grid, prevDay, trip, true);
          }
          
          // Add days of current month
          for (let day = 1; day <= daysInMonth; day++) {
            const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), day);
            createDayCell(grid, date, trip, false);
          }
          
          // Add days from next month to complete the grid
          const totalCells = grid.children.length - 7; // Subtract header row
          const remainingCells = Math.ceil(totalCells / 7) * 7 - totalCells;
          
          for (let day = 1; day <= remainingCells; day++) {
            const nextDay = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, day);
            createDayCell(grid, nextDay, trip, true);
          }
          
          monthContainer.appendChild(grid);
          container.appendChild(monthContainer);
          
          // Move to next month
          currentMonth.setMonth(currentMonth.getMonth() + 1);
        }
      }
      
      function createDayCell(grid, date, trip, otherMonth) {
        const cell = document.createElement('div');
        cell.className = 'calendar-day';
        
        if (otherMonth) {
          cell.classList.add('other-month');
        }
        
        // Check if it's today
        const today = new Date();
        if (date.toDateString() === today.toDateString()) {
          cell.classList.add('today');
        }
        
        // Day number
        const dayNumber = document.createElement('div');
        dayNumber.className = 'day-number';
        dayNumber.textContent = date.getDate();
        cell.appendChild(dayNumber);
        
        // Check for locations ending/starting on this date for crossover display
        const endingLocations = [];
        const startingLocations = [];
        
        // Check for locations on this date
        trip.locations.forEach((location, index) => {
          const locationStart = new Date(location.start_date);
          const locationEnd = new Date(location.end_date);
          
          // Add one day to end date to include the overlap/transition day
          const extendedEndDate = new Date(locationEnd);
          extendedEndDate.setDate(extendedEndDate.getDate() + 1);
          
          if (date >= locationStart && date <= extendedEndDate) {
            const indicator = document.createElement('div');
            indicator.className = 'location-indicator';
            indicator.textContent = location.name;
            indicator.style.background = getLocationColor(index);
            
            // Add special styling for start/end dates
            if (date.toDateString() === locationStart.toDateString()) {
              indicator.classList.add('location-start');
              startingLocations.push(location);
            }
            // Use extendedEndDate for the visual end indicator
            if (date.toDateString() === extendedEndDate.toDateString()) {
              indicator.classList.add('location-end');
              endingLocations.push(location);
            }
            
            // Add hover tooltip
            addLocationTooltip(indicator, location);
            
            cell.appendChild(indicator);
          }
        });
        
        // Display crossover information - show when there are multiple different locations on the same day
        const uniqueLocationsOnThisDay = trip.locations.filter((location, index) => {
          const locationStart = new Date(location.start_date);
          const locationEnd = new Date(location.end_date);
          const extendedEndDate = new Date(locationEnd);
          extendedEndDate.setDate(extendedEndDate.getDate() + 1);
          return date >= locationStart && date <= extendedEndDate;
        });
        
        if (uniqueLocationsOnThisDay.length > 1) {
          // Find which location is ending and which is starting
          const endingLocation = uniqueLocationsOnThisDay.find(loc => {
            const endDate = new Date(loc.end_date);
            endDate.setDate(endDate.getDate() + 1);
            return date.toDateString() === endDate.toDateString();
          });
          
          const startingLocation = uniqueLocationsOnThisDay.find(loc => {
            const startDate = new Date(loc.start_date);
            return date.toDateString() === startDate.toDateString();
          });
          
          if (endingLocation && startingLocation && endingLocation.name !== startingLocation.name) {
            const crossoverDiv = document.createElement('div');
            crossoverDiv.className = 'crossover-text';
            crossoverDiv.textContent = `${endingLocation.name} → ${startingLocation.name}`;
            cell.appendChild(crossoverDiv);
          }
        }
        
        grid.appendChild(cell);
      }
      
      // Helper function to add tooltip to location indicators
      function addLocationTooltip(indicator, location) {
        let tooltip = null;
        
        indicator.addEventListener('mouseenter', (e) => {
          const startDateStr = new Date(location.start_date).toLocaleDateString('en-US', {
            month: 'short', day: 'numeric', year: 'numeric'
          });
          const endDateStr = new Date(location.end_date).toLocaleDateString('en-US', {
            month: 'short', day: 'numeric', year: 'numeric'
          });
          
          tooltip = document.createElement('div');
          tooltip.className = 'location-tooltip';
          tooltip.innerHTML = `
            <strong>${location.name}</strong><br>
            ${location.city}, ${location.country}<br>
            ${startDateStr} - ${endDateStr}<br>
            Duration: ${location.days} days
          `;
          
          document.body.appendChild(tooltip);
          tooltip.style.display = 'block';
          tooltip.style.left = e.pageX + 10 + 'px';
          tooltip.style.top = e.pageY - 10 + 'px';
        });
        
        indicator.addEventListener('mouseleave', () => {
          if (tooltip) {
            tooltip.remove();
            tooltip = null;
          }
        });
        
        indicator.addEventListener('mousemove', (e) => {
          if (tooltip) {
            tooltip.style.left = e.pageX + 10 + 'px';
            tooltip.style.top = e.pageY - 10 + 'px';
          }
        });
      }
      
      function getLocationColor(index) {
        const colors = [
          'linear-gradient(135deg, #28a745, #20c997)',
          'linear-gradient(135deg, #007bff, #0056b3)',
          'linear-gradient(135deg, #fd7e14, #e8540b)',
          'linear-gradient(135deg, #6f42c1, #5a32a8)',
          'linear-gradient(135deg, #dc3545, #c82333)',
          'linear-gradient(135deg, #20c997, #17a2b8)'
        ];
        return colors[index % colors.length];
      }
      
      // Generate calendars for all trips
      {% for trip in trips %}
        generateCalendar('calendar-{{ trip.id }}', {
          id: {{ trip.id }},
          name: "{{ trip.name }}",
          start_date: "{{ trip.start_date.isoformat() }}",
          end_date: "{{ trip.end_date.isoformat() }}",
          locations: [
            {% for location in trip.locations %}
            {
              name: "{{ location.name }}",
              city: "{{ location.city }}",
              country: "{{ location.country }}",
              start_date: "{{ location.start_date.isoformat() }}",
              end_date: "{{ location.end_date.isoformat() }}",
              days: {{ location.days }}
            }{% if not loop.last %},{% endif %}
            {% endfor %}
          ]
        });
      {% endfor %}
    </script>
  </body>
</html>