services:
  # Reverse-proxy service
  traefik:
    image: traefik:v2.10
    container_name: traefik
    command:
      # Debug logging
      - '--log.level=DEBUG'
      - '--accesslog=true'
      - '--accesslog.fields.names.ClientHost=keep'
      # Enable dashboard
      - '--api.dashboard=true'
      - '--api.insecure=false'
      - '--api.debug=true'
      # HTTPS only
      - '--entrypoints.websecure.address=:443'
      # Enable for docker but only if they have the right labels
      - '--providers.docker=true'
      - '--providers.docker.exposedbydefault=false'
      - '--providers.docker.network=web'
      # Cloudflare DNS settings
      - '--certificatesresolvers.cloudflare.acme.dnschallenge=true'
      - '--certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare'
      - '--certificatesresolvers.cloudflare.acme.email=${CLOUDFLARE_API_EMAIL}'
      - '--certificatesresolvers.cloudflare.acme.storage=/letsencrypt/acme.json'
      # Only allow Cloudflare IPs (requires Cloudflare proxying)
      - '--entrypoints.websecure.forwardedHeaders.trustedIPs=${CLOUDFLARE_TRUSTED_IPS}'
      - '--entrypoints.websecure.forwardedHeaders.insecure=true'
    ports:
      - '443:443'
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
      # Ensure this file has 600 permissions
      - './acme.json:/letsencrypt/acme.json'
    networks:
      - web
    env_file:
      - .env
    environment:
      - CF_DNS_API_TOKEN=${CLOUDFLARE_API_TOKEN}
    labels:
      # Use traefik to provide HTTPS endpoint
      - 'traefik.enable=true'
      - 'traefik.http.routers.traefik.rule=Host(`traefik.jamesmassucco.com`)'
      - 'traefik.http.routers.traefik.entrypoints=websecure'
      - 'traefik.http.routers.traefik.service=api@internal'
      - 'traefik.http.routers.traefik.tls.certresolver=cloudflare'
      # Secure with basic auth and rate limiting
      - 'traefik.http.routers.traefik.middlewares=auth,ratelimit'
      # Define the middleware
      - 'traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_BASIC_AUTH}'
      # Add rate-limiting to prevent DOS
      - 'traefik.http.middlewares.ratelimit.ratelimit.average=50'
      - 'traefik.http.middlewares.ratelimit.ratelimit.burst=100'
    restart: unless-stopped

  # Basic whoami service, useful for debugging network configuration
  whoami:
    image: traefik/whoami
    container_name: whoami
    networks:
      - web
    labels:
      # Use traefik to provide HTTPS endpoint
      - traefik.enable=true
      - traefik.http.routers.whoami.rule=Host(`whoami.jamesmassucco.com`)
      - traefik.http.routers.whoami.entrypoints=websecure
      - traefik.http.routers.whoami.tls.certresolver=cloudflare

  # Automatically updates public IP DNS in Cloudflare
  cloudflare-ddns:
    image: favonia/cloudflare-ddns:latest
    container_name: cloudflare-ddns
    restart: unless-stopped
    network_mode: host
    read_only: true
    security_opt:
      - no-new-privileges:true
    environment:
      CLOUDFLARE_API_TOKEN: ${CLOUDFLARE_API_TOKEN}
      DOMAINS: >
        jamesmassucco.com,
        dashboard.jamesmassucco.com,
        blog.jamesmassucco.com,
        grafana.jamesmassucco.com,
        traefik.jamesmassucco.com,
        whoami.jamesmassucco.com,
        prometheus.jamesmassucco.com
      PROXIED: true
      TZ: America/Los_Angeles
    labels:
      - 'traefik.enable=false'

networks:
  web:
    external: true
