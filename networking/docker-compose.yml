services:
  # Reverse-proxy service
  traefik:
    image: traefik:v2.10
    container_name: traefik
    command:
      # Debug logging
      # - '--log.level=DEBUG'
      # Keep track of users accessing the application
      - '--accesslog=true'
      - '--accesslog.fields.names.ClientHost=keep'
      - '--accesslog.fields.names.Authorization=drop'
      - '--accesslog.fields.names.User-Agent=keep'
      - '--accesslog.fields.names.RequestHost=keep'
      - '--accesslog.fields.names.ClientUsername=keep'
      - '--accesslog.fields.names.Headers.X-Auth-Request-Email=keep'
      # Enable dashboard
      - '--api.dashboard=true'
      - '--api.insecure=false'
      - '--api.debug=true'
      # Expose metrics to Prometheus
      - '--metrics.prometheus=true'
      - '--metrics.prometheus.entrypoint=metrics'
      - '--entrypoints.metrics.address=:8082'
      # HTTPS only
      - '--entrypoints.websecure.address=:443'
      # Enable for docker but only if they have the right labels
      - '--providers.docker=true'
      - '--providers.docker.exposedbydefault=false'
      - '--providers.docker.network=web'
      # Cloudflare DNS settings
      - '--certificatesresolvers.cloudflare.acme.dnschallenge=true'
      - '--certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare'
      - '--certificatesresolvers.cloudflare.acme.email=${CLOUDFLARE_API_EMAIL}'
      - '--certificatesresolvers.cloudflare.acme.storage=/letsencrypt/acme.json'
      # Only allow Cloudflare IPs (requires Cloudflare proxying)
      - '--entrypoints.websecure.forwardedHeaders.trustedIPs=${CLOUDFLARE_TRUSTED_IPS}'
      - '--entrypoints.websecure.forwardedHeaders.insecure=true'
    ports:
      - '443:443'
      # Expose metrics
      - '8082:8082'
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
      # Ensure this file has 600 permissions
      - './acme.json:/letsencrypt/acme.json'
    networks:
      - web
    env_file:
      - .env
    environment:
      - CF_DNS_API_TOKEN=${CLOUDFLARE_API_TOKEN}
    labels:
      # Use traefik to provide HTTPS endpoint for dashboard
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`traefik.jamesmassucco.com`)
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.tls.certresolver=cloudflare
      # Setup middlewares
      - traefik.http.routers.traefik.middlewares=oauth-auth,ratelimit
      # Rate limit settings
      - traefik.http.middlewares.ratelimit.ratelimit.average=50
      - traefik.http.middlewares.ratelimit.ratelimit.burst=100
      # Configure provider for OAuth
      - traefik.http.middlewares.oauth-auth.forwardauth.address=https://oauth.jamesmassucco.com/
      - traefik.http.middlewares.oauth-auth.forwardauth.trustForwardHeader=true
      - traefik.http.middlewares.oauth-auth.forwardauth.authResponseHeaders=X-Auth-Request-User,X-Auth-Request-Email
    restart: unless-stopped

  # Provide Google OAuth services for other containers
  oauth2-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.6.0
    container_name: oauth2-proxy
    command:
      - --cookie-domain=.jamesmassucco.com
    environment:
      # Provider (Google) settings
      OAUTH2_PROXY_PROVIDER: google
      OAUTH2_PROXY_CLIENT_ID: ${GOOGLE_OAUTH2_CLIENT_ID}
      OAUTH2_PROXY_CLIENT_SECRET: ${GOOGLE_OAUTH2_CLIENT_SECRET}
      OAUTH2_PROXY_EMAIL_DOMAINS: '*'
      OAUTH2_PROXY_REDIRECT_URL: https://oauth.jamesmassucco.com/oauth2/callback
      # Cookie / session settings
      OAUTH2_PROXY_COOKIE_SECRET: ${GOOGLE_OAUTH2_COOKIE_SECRET}
      OAUTH2_PROXY_COOKIE_DOMAIN: .jamesmassucco.com
      OAUTH2_PROXY_COOKIE_SECURE: true
      OAUTH2_PROXY_COOKIE_SAMESITE: lax
      # Login flow
      OAUTH2_PROXY_SIGN_IN_PAGE: auto
      OAUTH2_PROXY_SKIP_PROVIDER_BUTTON: true
      OAUTH2_PROXY_WHITELIST_DOMAINS: .jamesmassucco.com
      # Headers and forwarding
      OAUTH2_PROXY_SET_XAUTHREQUEST: true
      OAUTH2_PROXY_REVERSE_PROXY: true
      # Networking
      OAUTH2_PROXY_HTTP_ADDRESS: 0.0.0.0:4180
      # Upstream target
      OAUTH2_PROXY_UPSTREAMS: static://200
      # Logging
      OAUTH2_PROXY_SHOW_DEBUG_ON_ERROR: true
      # OAUTH2_PROXY_LOG_LEVEL: debug
    networks:
      - web
    labels:
      - traefik.enable=true
      - traefik.http.routers.oauth.rule=Host(`oauth.jamesmassucco.com`)
      - traefik.http.routers.oauth.entrypoints=websecure
      - traefik.http.routers.oauth.tls.certresolver=cloudflare
      - traefik.http.services.oauth.loadbalancer.server.port=4180
    restart: unless-stopped

  # Basic whoami service, useful for debugging network configuration
  whoami:
    image: traefik/whoami
    container_name: whoami
    networks:
      - web
    labels:
      # Use traefik to provide HTTPS endpoint
      - traefik.enable=true
      - traefik.http.routers.whoami.rule=Host(`whoami.jamesmassucco.com`)
      - traefik.http.routers.whoami.entrypoints=websecure
      - traefik.http.routers.whoami.tls.certresolver=cloudflare
      # Use rate-limiting and OAuth
      - traefik.http.routers.whoami.middlewares=oauth-auth,ratelimit
    restart: unless-stopped

  # Automatically updates public IP DNS in Cloudflare
  cloudflare-ddns:
    image: favonia/cloudflare-ddns:latest
    container_name: cloudflare-ddns
    network_mode: host
    read_only: true
    security_opt:
      - no-new-privileges:true
    environment:
      CLOUDFLARE_API_TOKEN: ${CLOUDFLARE_API_TOKEN}
      DOMAINS: >
        jamesmassucco.com,
        dashboard.jamesmassucco.com,
        blog.jamesmassucco.com,
        oauth.jamesmassucco.com,
        assets.jamesmassucco.com,
        traefik.jamesmassucco.com,
        whoami.jamesmassucco.com,
        travel-admin.jamesmassucco.com,
      PROXIED: true
      TZ: America/Los_Angeles
    restart: unless-stopped

networks:
  web:
    external: true
