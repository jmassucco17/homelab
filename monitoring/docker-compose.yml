services:
  # Collect metrics from server(s)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    networks:
      - web
      - internal_metrics
    volumes:
      # Persist data
      - prometheus-data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      # 5-day retention policy
      - '--storage.tsdb.retention.time=5d'
    ports:
      - '9090:9090'
    depends_on:
      - node-exporter
    labels:
      # Use traefik to provide HTTP endpoint
      - 'traefik.enable=true'
      - 'traefik.http.routers.prometheus.rule=Host(`prometheus.jamesmassucco.com`)'
      - 'traefik.http.routers.prometheus.entrypoints=websecure'
      - 'traefik.http.routers.prometheus.tls.certresolver=cloudflare'
      # Use rate-limiting and OAuth
      - traefik.http.routers.prometheus.middlewares=oauth-auth,ratelimit
    restart: unless-stopped

  # Export system metrics like disk/RAM/CPU/network
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    networks:
      - internal_metrics
    pid: host
    command:
      - '--path.rootfs=/host'
    volumes:
      - /:/host:ro,rslave
    restart: unless-stopped

  # Export docker container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    networks:
      - internal_metrics
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    restart: unless-stopped

  # Store and index logs
  loki:
    image: grafana/loki:latest
    # XXX debug
    container_name: loki
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - '3100:3100'
    networks:
      - internal_metrics
    restart: unless-stopped

  # Collect and ship logs to Loki
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /etc/machine-id:/etc/machine-id
      - /etc/hostname:/etc/hostname
      - /etc/promtail:/etc/promtail
      - /var/run/docker.sock:/var/run/docker.sock
      - ./promtail-config.yaml:/etc/config/promtail-config.yaml
    command: -config.file=/etc/config/promtail-config.yaml
    networks:
      - internal_metrics
    restart: unless-stopped

  # Serve up dashboards for metrics and log viewing
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    networks:
      - web
      - internal_metrics
    labels:
      # Use traefik to provide HTTPS endpoint
      - 'traefik.enable=true'
      - 'traefik.http.routers.grafana.rule=Host(`grafana.jamesmassucco.com`)'
      - 'traefik.http.routers.grafana.entrypoints=websecure'
      - 'traefik.http.routers.grafana.tls.certresolver=cloudflare'
      - 'traefik.http.services.grafana.loadbalancer.server.port=3000'
    volumes:
      - grafana-storage:/var/lib/grafana
    environment:
      - GF_SERVER_ROOT_URL=https://grafana.jamesmassucco.com
      - GF_SERVER_DOMAIN=grafana.jamesmassucco.com
    restart: unless-stopped

networks:
  web:
    external: true
  internal_metrics:
    internal: true

volumes:
  grafana-storage:
  prometheus-data:
  loki-data:
