#!/usr/bin/env bash
set -euo pipefail

# Run at repo root (one level up from this directory)
cd "$(dirname "$0")"/..

main() {
    echo "🔧 Bootstrapping project environment..."
    install_python
    setup_virtualenv
    install_python_deps
    setup_docker_services
    setup_pre_commit
    install_node_deps
    echo "✅ Bootstrap complete."
}

install_python() {
    echo "🔍 Installing Python..."
    REQUIRED_PKGS=(python3 python3-venv python3-pip)
    MISSING_PKGS=()

    for pkg in "${REQUIRED_PKGS[@]}"; do
        dpkg -s "$pkg" &>/dev/null || MISSING_PKGS+=("$pkg")
    done

    if [ "${#MISSING_PKGS[@]}" -gt 0 ]; then
        echo "📦 Installing missing Python packages: ${MISSING_PKGS[*]}"
        sudo apt-get update -qq
        sudo apt-get install -y "${MISSING_PKGS[@]}"
    else
        echo "📦 Python already installed"
    fi

    PYTHON_VERSION=$(python3 -V 2>&1 | awk '{print $2}')
    if [[ "$PYTHON_VERSION" != 3.12.* ]]; then
        echo "⚠️  Warning: Python version is $PYTHON_VERSION, but 3.12 is recommended."
    fi
}

setup_virtualenv() {
    if [ -x "venv/bin/python" ]; then
        venv_version=$(venv/bin/python --version 2>&1)
        sys_version=$(python3 --version 2>&1)
        if [[ "$venv_version" == "$sys_version" ]]; then
            # shellcheck disable=SC1091
            source venv/bin/activate
            return
        fi
    fi

    echo "📁 Creating virtual environment..."
    python3 -m venv venv
    # shellcheck disable=SC1091
    source venv/bin/activate
}

install_python_deps() {
    echo "🐍 Installing Python dependencies..."
    local hash_file=".requirements.hash"
    local current_hash
    current_hash=$(sha256sum requirements.txt | awk '{print $1}')

    if [ -f "$hash_file" ] && grep -q "$current_hash" "$hash_file"; then
        echo "📦 Python dependencies already up-to-date"
        return
    fi

    echo "📦 Updating Python dependencies..."
    python3 -m pip install --upgrade pip --quiet
    python3 -m pip install -r requirements.txt --quiet

    echo "$current_hash" > "$hash_file"
}

setup_docker_services() {
    echo "🚢 Setting up docker systemd services..."
    echo "XXX skipping this because of issues"
    # sudo python3 scripts/setup_services.py
    echo "📦 Done setting up docker systemd services"
}

setup_pre_commit() {
    echo "🪝 Setting up pre-commit hooks..."
    local hook_file=".git/hooks/pre-push"
    local config_file=".pre-commit-config.yaml"
    local hash_file=".pre-commit-config.hash"

    local current_hash
    current_hash=$(sha256sum "$config_file" | awk '{print $1}')

    if [[ -f "$hook_file" ]] && grep -q "generated by pre-commit" "$hook_file" &&
       [[ -f "$hash_file" ]] && grep -q "$current_hash" "$hash_file"; then
        echo "📦 Pre-commit hook already installed and up-to-date"
        return
    fi

    echo "📦 Installing pre-commit hook..."
    pre-commit install --hook-type pre-push --overwrite
    echo "$current_hash" > "$hash_file"
}

install_node_deps() {
    echo "🎨 Installing npm and Node.js dependencies..."
    if ! command -v npm &>/dev/null; then
        echo "📦 Installing npm..."
        sudo apt-get install -y npm
    fi

    local package_file="package.json"
    local hash_file=".package.hash"
    local current_hash
    current_hash=$(sha256sum "$package_file" | awk '{print $1}')

    if [ -f "$hash_file" ] && grep -q "$current_hash" "$hash_file"; then
        echo "📦 Node.js dependencies already up-to-date"
        return
    fi

    echo "📦 Installing Node.js dev dependencies..."
    npm install --silent

    echo "$current_hash" > "$hash_file"
}

main "$@"