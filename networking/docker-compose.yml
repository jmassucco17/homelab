services:

  # Reverse-proxy service
  traefik:
    image: traefik:v2.10
    container_name: traefik
    command:
      # Debug logging
      - "--log.level=DEBUG"
      - "--accesslog=true"
      - "--accesslog.fields.names.ClientHost=keep"
      # Enable dashboard
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--api.debug=true"
      # HTTP(80) and HTTPS(443)
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # Enable for docker but only if they have the right labels
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=web"
      # Cloudflare DNS settings
      - "--certificatesresolvers.cloudflare.acme.dnschallenge=true"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.cloudflare.acme.email=${CLOUDFLARE_API_EMAIL}"
      - "--certificatesresolvers.cloudflare.acme.storage=/letsencrypt/acme.json"
      # Only allow Cloudflare IPs (requires Cloudflare proxying)
      - "--entrypoints.web.forwardedHeaders.trustedIPs=${CLOUDFLARE_TRUSTED_IPS}"
      - "--entrypoints.web.forwardedHeaders.insecure=true"
      - "--entrypoints.websecure.forwardedHeaders.trustedIPs=${CLOUDFLARE_TRUSTED_IPS}"
      - "--entrypoints.websecure.forwardedHeaders.insecure=true"
      # Disable HTTPS->HTTPS redirect (CloudFlare is configured to do this instead)
      # - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      # - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      # Ensure this file has 600 permissions
      - "./acme.json:/letsencrypt/acme.json"
    networks:
      - web
    env_file:
      - .env
    environment:
      - CF_DNS_API_TOKEN=${CLOUDFLARE_API_TOKEN}
    labels:
      # Use traefik to provide HTTP endpoint
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.jamesmassucco.com`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.tls.certresolver=cloudflare"
      # Dummy HTTP endpoint (weird traefik reasons, to be debugged later
      - "traefik.http.routers.traefik-http.rule=Host(`traefik.jamesmassucco.com`)"
      - "traefik.http.routers.traefik-http.entrypoints=web"
      - "traefik.http.routers.traefik-http.service=api@internal"
      # Secure with basic auth and rate limiting
      - "traefik.http.routers.traefik.middlewares=auth,ratelimit"
      # Define the middleware
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_BASIC_AUTH}"
      # Add rate-limiting to prevent DOS
      - "traefik.http.middlewares.ratelimit.ratelimit.average=50"
      - "traefik.http.middlewares.ratelimit.ratelimit.burst=100"
    restart: unless-stopped

  # Basic whoami service, useful for debugging network configuration
  whoami:
    image: traefik/whoami
    container_name: whoami
    networks:
      - web
    labels:
      # Use traefik to provide HTTP endpoint
      - "traefik.enable=true"
      - "traefik.http.routers.whoami-https.rule=Host(`whoami.jamesmassucco.com`)"
      - "traefik.http.routers.whoami-https.entrypoints=websecure"
      - "traefik.http.routers.whoami-https.tls.certresolver=cloudflare"
      # Dummy HTTP endpoint (weird traefik reasons, to be debugged later
      - "traefik.http.routers.whoami-http.rule=Host(`whoami.jamesmassucco.com`)"
      - "traefik.http.routers.whoami-http.entrypoints=web"

  # Automatically updates public IP DNS in Cloudflare
  cloudflare-ddns:
    image: favonia/cloudflare-ddns:latest
    container_name: cloudflare-ddns
    restart: unless-stopped
    network_mode: host
    read_only: true
    security_opt:
      - no-new-privileges:true
    environment:
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      - DOMAINS=${DOMAINS}
      - PROXIED=${PROXIED}
      - TZ=${TZ}
      # # Disable IPv6
      # - IP6_PROVIDER=none
    labels:
      - "traefik.enable=false"

networks:
  web:
    external: true
